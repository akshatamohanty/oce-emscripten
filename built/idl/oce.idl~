typedef double Standard_Real;
typedef boolean Standard_Boolean;

// tesselator for visualization
interface Tesselator{
	void Tesselator([Const,Ref] TopoDS_Shape aShape);
	DOMString ExportShapeToThreejs();
};

// BRepMesh_IncrementalMesh.hxx
interface BRepMesh_IncrementalMesh{
	// constructor automatically call to perform meshing
	void BRepMesh_IncrementalMesh([Const, Ref] TopoDS_Shape theShape, [Const] Standard_Real theLinDeflection);
};

// has to be exposed - because tesselator will take topods_shape
interface TopoDS_Shape{
	
};

interface Mobius{
	void Mobius();
	[Ref]T_Face MakePolygon([Ref] T_Vertex aPnt1, [Ref] T_Vertex aPnt2, [Ref] T_Vertex aPnt3, [Ref] T_Vertex aPnt4);
	[Ref]T_Solid MakeBox([Const] Standard_Real length, [Const] Standard_Real width, [Const] Standard_Real height);
	[Ref]T_Solid MakeCylinder([Const] Standard_Real radius, [Const] Standard_Real height);
};

interface Topology{
	[Ref]TopoDS_Shape visualize();
	//[Ref]vector Faces();
};

interface T_Vertex{
	void T_Vertex();
	void T_Vertex( [Const] Standard_Real x, [Const] Standard_Real y, [Const] Standard_Real z);
	[Ref]gp_Pnt getNativePoint();
};
T_Vertex implements Topology;

interface gp_Pnt{

};

interface T_Face{
	void T_Face();
	void T_Face( [Ref]TopoDS_Face face);

	[Ref]T_Solid extrude( [Const] Standard_Real x, [Const] Standard_Real y, [Const] Standard_Real z );

	[Ref]TopoDS_Face getNativeFace();
	//[Ref]TopoDS_Shape visualize();
};
T_Face implements Topology;

interface T_Solid{
	void T_Solid();
	void T_Solid( [Ref]TopoDS_Shape solid);

	[Ref]TopoDS_Shape booleanOp( [Ref]T_Solid other_solid );

	[Ref]TopoDS_Shape getNativeSolid();
	//[Ref]TopoDS_Shape visualize();
};
T_Face implements Topology;

interface TopoDS_Face{

};

